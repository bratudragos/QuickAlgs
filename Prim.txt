#include <queue>
#include <list>
#include <stdlib.h>
#include <iostream>
using namespace std;
typedef pair<int,int> iPair;

class Graph{
    int V;
    list <iPair> *adj;
public:
    Graph(int V);
    void addEdge(int u,int v,int w);
    void MST(int src);
};
Graph::Graph(int V) {
    this->V=V;
    adj = new list<iPair>[V];
}
void Graph::addEdge(int u, int v, int w) {
    adj[u].push_back(make_pair(w,v));
    adj[v].push_back(make_pair(w,u));
}

void Graph::MST(int src) {
    priority_queue <iPair,vector<iPair>,greater<iPair>> pq;
    vector<int> parent(V,-1);
    vector<int> key(V,INT_MAX);
    vector<bool> inMST(V,false);

    key[src]=0;
    pq.push(make_pair(key[src],src));
    
    while(!pq.empty()){
        int u=pq.top().second;
        pq.pop();
        inMST[u]=true;
        list<iPair>::iterator i;
        for(i=adj[u].begin();i!=adj[u].end();++i) {
            int v = (*i).second;
            int w = (*i).first;
            if (inMST[v]==false && key[v] > w){
                key[v]=w;
                pq.push(make_pair(key[v],v));
                parent[v]=u;
            }
        }
    }
    for(int i=0;i<V;i++)
        cout<<parent[i]<<" ";
}

int main()
{
    int V = 9;
    Graph g(V);

    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

    g.MST(0);

    return 0;
}
