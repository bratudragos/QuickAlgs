#include <iostream>
#include <vector>
#include <stdlib.h>
using namespace std;
typedef pair<int,int> iPair;
class Graph{
    int V,E;
    vector<pair<int,iPair>> edges;
public:
    Graph(int V,int E);
    void addEdge(int u,int v,int w);
    int kruskal();
};

Graph::Graph(int V, int E) {
    this->V=V;
    this->E=E;
}

void Graph::addEdge(int u, int v, int w) {
    edges.push_back({w,{u,v}});
}

struct DisjointSets{
    int *parent,*rank,n;
    DisjointSets(int n){
        this->n=n;
        parent=new int[n+1];
        rank=new int[n+1];
        for(int i=0;i<=n;i++){
            parent[i]=i;
            rank[i]=0;
        }
    }

    int find(int u){
        if(u!=parent[u])
            parent[u]=find(parent[u]);
        return parent[u];
    }

    void merge(int x,int y){
        x=find(x);
        y=find(y);

        if(rank[x]>rank[y])
            parent[y]=x;
        if(rank[x]<rank[y])
            parent[x]=y;
        if(rank[x]==rank[y])
            rank[y]++;
    }
};

int Graph::kruskal() {
    int mst_wt=0;
    DisjointSets ds(V);
    sort(edges.begin(),edges.end());
    vector <pair<int,iPair>>::iterator i;
    for(i=edges.begin();i!=edges.end();++i){
        int u=i->second.first;
        int v=i->second.second;
        int set_u=ds.find(u);
        int set_v=ds.find(v);
        if(set_u!=set_v){
            cout<<u<<" "<<v<<endl;
            mst_wt= mst_wt + i->first;
            ds.merge(set_u,set_v);
        }
    }
    return mst_wt;
}

int main()
{
    /* Let us create above shown weighted
       and unidrected graph */
    int V = 9, E = 14;
    Graph g(V, E);

    //  making above shown graph
    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

    cout << "Edges of MST are \n";
    int mst_wt = g.kruskal();

    cout << "\nWeight of MST is " << mst_wt;

    return 0;
}

