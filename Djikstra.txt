#include <iostream>
#include <list>
#include <queue>

using namespace std;
typedef pair<int,int> iPair;
class Graph{
    list<iPair> *adj;
    int V;
public:
    Graph(int V);
    void addEdge(int u,int v,int w);
    void Djikstra(int src);
};

Graph::Graph(int V) {
    this->V=V;
    adj = new list<iPair>[V];
}

void Graph::addEdge(int u, int v, int w) {
    adj[u].push_back({w,v});
    adj[v].push_back({w,u});
}

void Graph::Djikstra(int src) {
    priority_queue <iPair,vector<iPair>,greater<iPair>> pq;
    vector<int> dist(V,INT_MAX);
    dist[src]=0;
    pq.push({dist[src],src});
    while(!pq.empty()){
        int u=pq.top().second;
        pq.pop();
        list<iPair>::iterator i;
        for(i=adj[u].begin();i!=adj[u].end();++i){
            int v=(*i).second;
            int weight=(*i).first;
            if(dist[v]> dist[u] + weight){
                dist[v]=dist[u]+weight;
                pq.push({dist[v],v});
            }
        }
    }

    for(int i=0;i<V;i++)
        cout<<dist[i]<<" ";
}


int main()
{
    // create the graph given in above fugure
    int V = 9;
    Graph g(V);

    //  making above shown graph
    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

    g.Djikstra(0);

    return 0;
}
